// <auto-generated />
using System;
using JournalEntryTask.Infrastructure.Presistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JournalEntryTask.Infrastructure.Migrations
{
    [DbContext(typeof(JournalEntryTaskContext))]
    partial class JournalEntryTaskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JournalEntryTask.Domain.Models.AccountsChart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<bool>("AllowEntry")
                        .HasColumnType("bit")
                        .HasColumnName("Allow_Entry");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("Branch_ID");

                    b.Property<short>("ChartLevelDepth")
                        .HasColumnType("smallint")
                        .HasColumnName("Chart_Level_Depth");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Creation_Date");

                    b.Property<short?>("FkCostCenterTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("FK_Cost_Center_Type_ID");

                    b.Property<short>("FkTransactionTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("FK_Transaction_Type_ID");

                    b.Property<Guid?>("FkWorkFieldsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FK_Work_Fields_ID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Active");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("NameAR");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("NameEN");

                    b.Property<short?>("NoOfChilds")
                        .HasColumnType("smallint")
                        .HasColumnName("noOfChilds");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("OrgId")
                        .HasColumnType("bigint")
                        .HasColumnName("Org_ID");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Parent_ID");

                    b.Property<string>("ParentNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Parent_Number");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("User_ID");

                    b.HasKey("Id")
                        .HasName("PK__Accounts__3214EC2748817F42");

                    b.ToTable("AccountsChart", (string)null);
                });

            modelBuilder.Entity("JournalEntryTask.Domain.Models.JournalDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("JournalHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("JournalHeaderId");

                    b.ToTable("JournalDetails");
                });

            modelBuilder.Entity("JournalEntryTask.Domain.Models.JournalHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntryNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("JournalHeaders");
                });

            modelBuilder.Entity("JournalEntryTask.Domain.Models.JournalDetails", b =>
                {
                    b.HasOne("JournalEntryTask.Domain.Models.AccountsChart", "AccountChart")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JournalEntryTask.Domain.Models.JournalHeader", "JournalHeader")
                        .WithMany("JournalDetails")
                        .HasForeignKey("JournalHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountChart");

                    b.Navigation("JournalHeader");
                });

            modelBuilder.Entity("JournalEntryTask.Domain.Models.JournalHeader", b =>
                {
                    b.Navigation("JournalDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
